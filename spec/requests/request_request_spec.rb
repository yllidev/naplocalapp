require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.


RSpec.describe "/requests", type: :request do
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:request_category) { create(:request_category) }
  let(:valid_attributes) {
    {latitude: 23434, longitude: -4454353, fulfilled: false, description: 'test request', user_id: user.id, request_category_id: request_category.id, limit: nil}
  }

  let(:invalid_attributes) {
    {latitude: 23434, longitude: -4454353, fulfilled: false, description: 'test request', user_id: nil, request_category_id: nil, limit: nil}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Request.create! valid_attributes
      get requests_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      request = Request.create! valid_attributes
      get requests_url(request)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Request" do
        expect {
          post requests_url, params: valid_attributes
        }.to change(Request, :count).by(1)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested request" do
        request = Request.create! valid_attributes
        patch "/requests/#{request.id}", params: valid_attributes
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested request" do
      request = Request.create! valid_attributes
      expect {
        delete request_url(request)
      }.to change(Request, :count).by(-1)
    end
  end
end
